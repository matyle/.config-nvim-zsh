"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewFeaturesArguments = exports.engineTypeArguments = exports.engineTypes = exports.generatorProviderArguments = exports.generatorProviders = exports.dataSourceProviderArguments = exports.dataSourceProviders = exports.dataSourceUrlArguments = exports.relationOnUpdateArguments = exports.relationOnDeleteArguments = exports.relationArguments = exports.sortLengthProperties = exports.fieldAttributes = exports.filterSortLengthBasedOnInput = exports.givenFieldAttributeParams = exports.sortAutoCompletionItems = exports.blockAttributes = exports.givenBlockAttributeParams = exports.supportedGeneratorFields = exports.supportedDataSourceFields = exports.allowedBlockTypes = exports.corePrimitiveTypes = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const completions = __importStar(require("./completions.json"));
/**
 * Converts a json object containing labels and documentations to CompletionItems.
 */
function convertToCompletionItems(completionItems, itemKind) {
    const result = [];
    for (const item of completionItems) {
        result.push({
            label: item.label,
            kind: itemKind,
            insertText: item.insertText,
            insertTextFormat: item.insertText
                ? vscode_languageserver_1.InsertTextFormat.Snippet
                : vscode_languageserver_1.InsertTextFormat.PlainText,
            insertTextMode: item.insertText
                ? vscode_languageserver_1.InsertTextMode.adjustIndentation
                : undefined,
            documentation: item.documentation
                ? { kind: vscode_languageserver_1.MarkupKind.Markdown, value: item.documentation }
                : undefined,
        });
    }
    return result;
}
/**
 * Converts a json object containing attributes including function signatures to CompletionItems.
 */
function convertAttributesToCompletionItems(completionItems, itemKind) {
    // https://code.visualstudio.com/api/references/vscode-api#CompletionItem
    const result = [];
    for (const item of completionItems) {
        const docComment = [
            '```prisma',
            item.fullSignature,
            '```',
            '___',
            item.documentation,
        ];
        for (const param of item.params) {
            docComment.push('', '_@param_ ' + param.label + ' ' + param.documentation);
        }
        result.push({
            label: item.label,
            kind: itemKind,
            insertText: item.insertText,
            insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
            insertTextMode: item.insertText
                ? vscode_languageserver_1.InsertTextMode.adjustIndentation
                : undefined,
            documentation: {
                kind: vscode_languageserver_1.MarkupKind.Markdown,
                value: docComment.join('\n'),
            },
        });
    }
    return result;
}
exports.corePrimitiveTypes = convertToCompletionItems(completions.primitiveTypes, vscode_languageserver_1.CompletionItemKind.TypeParameter);
exports.allowedBlockTypes = convertToCompletionItems(completions.blockTypes, vscode_languageserver_1.CompletionItemKind.Class);
exports.supportedDataSourceFields = convertToCompletionItems(completions.dataSourceFields, vscode_languageserver_1.CompletionItemKind.Field);
exports.supportedGeneratorFields = convertToCompletionItems(completions.generatorFields, vscode_languageserver_1.CompletionItemKind.Field);
function givenBlockAttributeParams(blockAttribute, previewFeatures, datasourceProvider) {
    const items = convertToCompletionItems(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    completions.blockAttributes.find((item) => item.label.includes(blockAttribute)).params, vscode_languageserver_1.CompletionItemKind.Property);
    if (blockAttribute === '@@index') {
        // TODO figure out if we need to add cockroachdb provider here
        if ((previewFeatures === null || previewFeatures === void 0 ? void 0 : previewFeatures.includes('extendedindexes')) &&
            datasourceProvider &&
            ['postgresql', 'postgres'].includes(datasourceProvider)) {
            // The type argument is only available for PostgreSQL on @@index
            items.push({
                label: 'type',
                kind: 10,
                insertText: 'type: $0',
                insertTextFormat: 2,
                insertTextMode: 2,
                documentation: {
                    kind: 'markdown',
                    value: 'Defines the access type of indexes: BTree (default) or Hash.',
                },
            });
        }
    }
    return items;
}
exports.givenBlockAttributeParams = givenBlockAttributeParams;
exports.blockAttributes = convertAttributesToCompletionItems(completions.blockAttributes, vscode_languageserver_1.CompletionItemKind.Property);
exports.sortAutoCompletionItems = [
    {
        label: 'Asc',
        kind: 13,
        insertTextFormat: 1,
        documentation: {
            kind: 'markdown',
            value: 'Ascending',
        },
    },
    {
        label: 'Desc',
        kind: 13,
        insertTextFormat: 1,
        documentation: {
            kind: 'markdown',
            value: 'Descending',
        },
    },
];
function givenFieldAttributeParams(fieldAttribute, previewFeatures, datasourceProvider, wordBeforePosition) {
    const items = convertToCompletionItems(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    completions.fieldAttributes.find((item) => item.label.includes(fieldAttribute)).params, vscode_languageserver_1.CompletionItemKind.Property);
    return filterSortLengthBasedOnInput(fieldAttribute, previewFeatures, datasourceProvider, wordBeforePosition, items);
}
exports.givenFieldAttributeParams = givenFieldAttributeParams;
function filterSortLengthBasedOnInput(attribute, previewFeatures, datasourceProvider, wordBeforePosition, items) {
    if (previewFeatures === null || previewFeatures === void 0 ? void 0 : previewFeatures.includes('extendedindexes')) {
        // Auto completion for Desc | Asc
        // includes because `@unique(sort: |)` means wordBeforePosition = '@unique(sort:'
        if (wordBeforePosition.includes('sort:')) {
            return exports.sortAutoCompletionItems;
        }
        // The length argument is available on MySQL only on the
        // @id, @@id, @unique, @@unique and @@index fields.
        // The sort argument is available for all databases on the
        // @unique, @@unique and @@index fields.
        // Additionally, SQL Server also allows it on @id and @@id.
        // Which translates too
        // - `length` argument for `@id`, `@@id`, `@unique`, `@@unique` and `@@index` (MySQL only)
        // - Note that on the `@@` the argument is on available a field - not on the top level attribute
        // - `sort` argument for `@unique`, `@@unique` and `@@index` (Additionally `@id` and `@@id` for SQL Server)
        if (datasourceProvider === 'mysql') {
            if (['@unique', '@@unique', '@@index'].includes(attribute)) {
                return items;
            }
            else {
                // filter sort out
                return items.filter((arg) => arg.label !== 'sort');
            }
        }
        else if (datasourceProvider === 'sqlserver') {
            if (['@unique', '@@unique', '@@index', '@id', '@@id'].includes(attribute)) {
                // only filter length out
                return items.filter((arg) => arg.label !== 'length');
            }
            else {
                // filter length and sort out
                return items.filter((arg) => arg.label !== 'length' && arg.label !== 'sort');
            }
        }
        else {
            if (['@unique', '@@unique', '@@index'].includes(attribute)) {
                // only filter length out
                return items.filter((arg) => arg.label !== 'length');
            }
            else {
                // filter length and sort out
                return items.filter((arg) => arg.label !== 'length' && arg.label !== 'sort');
            }
        }
    }
    // filter length and sort out
    return items.filter((arg) => arg.label !== 'length' && arg.label !== 'sort');
}
exports.filterSortLengthBasedOnInput = filterSortLengthBasedOnInput;
exports.fieldAttributes = convertAttributesToCompletionItems(completions.fieldAttributes, vscode_languageserver_1.CompletionItemKind.Property);
exports.sortLengthProperties = 
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
convertToCompletionItems(completions.fieldAttributes
    .find((item) => item.label === '@unique')
    .params.filter((item) => item.label === 'length' || item.label === 'sort'), vscode_languageserver_1.CompletionItemKind.Property);
exports.relationArguments = convertAttributesToCompletionItems(completions.relationArguments, vscode_languageserver_1.CompletionItemKind.Property);
function givenReferentialActionParams(referentialAction) {
    return convertToCompletionItems(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    completions.relationArguments.find((item) => item.label === referentialAction).params, vscode_languageserver_1.CompletionItemKind.Enum);
}
exports.relationOnDeleteArguments = givenReferentialActionParams('onDelete');
exports.relationOnUpdateArguments = givenReferentialActionParams('onUpdate');
exports.dataSourceUrlArguments = convertAttributesToCompletionItems(completions.datasourceUrlArguments, vscode_languageserver_1.CompletionItemKind.Property);
exports.dataSourceProviders = convertToCompletionItems(completions.datasourceProviders, vscode_languageserver_1.CompletionItemKind.Constant);
exports.dataSourceProviderArguments = convertToCompletionItems(completions.datasourceProviderArguments, vscode_languageserver_1.CompletionItemKind.Property);
// generator.provider
exports.generatorProviders = convertToCompletionItems(completions.generatorProviders, vscode_languageserver_1.CompletionItemKind.Constant);
exports.generatorProviderArguments = convertToCompletionItems(completions.generatorProviderArguments, vscode_languageserver_1.CompletionItemKind.Property);
// generator.engineType
exports.engineTypes = convertToCompletionItems(completions.engineTypes, vscode_languageserver_1.CompletionItemKind.Constant);
exports.engineTypeArguments = convertToCompletionItems(completions.engineTypeArguments, vscode_languageserver_1.CompletionItemKind.Property);
// generator.previewFeatures
exports.previewFeaturesArguments = convertToCompletionItems(completions.previewFeaturesArguments, vscode_languageserver_1.CompletionItemKind.Property);
//# sourceMappingURL=completionUtil.js.map