"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const referentialActions_1 = __importDefault(require("../prisma-fmt/referentialActions"));
suite('prisma-fmt subcommand: referential-actions', () => {
    test('SQLite', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "sqlite"
            url      = env("DATABASE_URL")
        }
        
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, [
            'Cascade',
            'Restrict',
            'NoAction',
            'SetNull',
            'SetDefault',
        ]);
    }));
    test('PostgreSQL - minimal', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "postgresql"
            url      = env("DATABASE_URL")
        }
        
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, [
            'Cascade',
            'Restrict',
            'NoAction',
            'SetNull',
            'SetDefault',
        ]);
    }));
    test('PostgreSQL - example', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "postgresql"
            url      = env("DATABASE_URL")
        }
        
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }
        
        model User {
            id    Int    @id @default(autoincrement())
            posts Post[]
        }
        
        model Post {
            id     Int          @id @default(autoincrement())
            title  String
            tags   TagOnPosts[]
            User   User?        @relation(fields: [userId], references: [id])
            userId Int?
        }
        
        model TagOnPosts {
            id     Int   @id @default(autoincrement())
            post   Post? @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
            tag    Tag?  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
            postId Int?
            tagId  Int?
        }
        
        model Tag {
            id    Int          @id @default(autoincrement())
            name  String       @unique
            posts TagOnPosts[]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, [
            'Cascade',
            'Restrict',
            'NoAction',
            'SetNull',
            'SetDefault',
        ]);
    }));
    test('MySQL', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "mysql"
            url      = env("DATABASE_URL")
        }
        
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, [
            'Cascade',
            'Restrict',
            'NoAction',
            'SetNull',
            'SetDefault',
        ]);
    }));
    test('SQL Server', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "sqlserver"
            url      = env("DATABASE_URL")
        }
        
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["microsoftSqlServer", "referentialActions"]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, [
            'Cascade',
            'NoAction',
            'SetNull',
            'SetDefault',
        ]);
    }));
    test('no datasource should return empty []', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }`;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, []);
    }));
    test('invalid schema should return empty []', () => __awaiter(void 0, void 0, void 0, function* () {
        const schema = `
        datasource db {
            provider = "sqlite"
            url      = env("DATABASE_URL")
        }

        generator client {
            provider        = "prisma-client-js"
            previewFeatures = ["referentialActions"]
        }
        
        model { sss } // invalid model
        `;
        const actions = (0, referentialActions_1.default)(schema);
        assert_1.default.deepStrictEqual(actions, []);
    }));
});
//# sourceMappingURL=prisma-fmt-referentialActions.test.js.map